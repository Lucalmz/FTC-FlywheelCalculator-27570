name: Release Packager

on:
  push:
    tags:
      - 'v*' # 仅在推送 v*.*.* 格式的标签时触发

jobs:
  # --- 第一阶段：构建 ---
  build:
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}

    outputs: # 定义这个任务的输出，方便后续任务使用
      asset_path: ${{ steps.upload_path.outputs.asset_path }}
      asset_name: ${{ steps.upload_path.outputs.asset_name }}

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Prepare Variables
        id: prep
        run: echo "APP_VERSION=${GITHUB_REF_NAME#v}" >> $GITHUB_ENV
        shell: bash

      - name: Build with Maven
        run: |
          mvn versions:set -DnewVersion=${{ github.ref_name }}
          mvn -B package --file pom.xml
          echo "JAR_NAME=$(ls target/*.jar | xargs -n 1 basename)" >> $GITHUB_ENV
        shell: bash

      - name: Build Installer
        run: |
          # Windows
          if [ "${{ runner.os }}" == "Windows" ]; then
            jpackage --name "FlywheelCalculator" --input target/ --main-jar ${{ env.JAR_NAME }} --main-class com.bear27570.flywheelcalculator.MainApp --type exe --dest build/ --icon packaging/icon.ico --app-version ${{ env.APP_VERSION }} --win-console --java-options "-Dfile.encoding=UTF-8"
          # macOS
          elif [ "${{ runner.os }}" == "macOS" ]; then
            jpackage --name "FlywheelCalculator" --input target/ --main-jar ${{ env.JAR_NAME }} --main-class com.bear27570.flywheelcalculator.MainApp --type dmg --dest build/ --icon packaging/icon.icns --app-version ${{ env.APP_VERSION }} --java-options "-Dfile.encoding=UTF-8"
          fi
        shell: bash

      - name: Prepare Upload Path
        id: upload_path
        run: |
          if [ "${{ runner.os }}" == "Windows" ]; then
            echo "asset_path=build/FlywheelCalculator-${{ env.APP_VERSION }}.exe" >> $GITHUB_OUTPUT
            echo "asset_name=Windows-Installer-${{ env.APP_VERSION }}.exe" >> $GITHUB_OUTPUT
          elif [ "${{ runner.os }}" == "macOS" ]; then
            echo "asset_path=build/FlywheelCalculator-${{ env.APP_VERSION }}.dmg" >> $GITHUB_OUTPUT
            echo "asset_name=macOS-Installer-${{ env.APP_VERSION }}.dmg" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Upload Artifact (for debugging and backup)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.upload_path.outputs.asset_name }}
          path: ${{ steps.upload_path.outputs.asset_path }}

  # --- 第二阶段：发布 ---
  release:
    needs: build # 依赖于 build 任务成功完成
    runs-on: ubuntu-latest # 发布任务只需要一个平台即可

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/ # 将所有构建产物下载到这个文件夹

      - name: Display structure of downloaded files
        run: ls -R artifacts/

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          # files: 将所有下载下来的安装包都附加到Release
          files: artifacts/**/*
          # 自动生成发布说明
          generate_release_notes: true